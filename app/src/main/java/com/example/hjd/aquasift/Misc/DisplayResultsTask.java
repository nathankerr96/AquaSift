package com.example.hjd.aquasift.Misc;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.provider.ContactsContract;
import android.util.Log;
import android.util.Pair;

import com.example.hjd.aquasift.R;
import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.series.DataPoint;
import com.jjoe64.graphview.series.LineGraphSeries;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static java.lang.Math.abs;
import static java.lang.Math.ceil;

/**
 * Created by HJD on 12/30/2016.
 */

public class DisplayResultsTask extends AsyncTask<Void, DataPoint, Void> {

    UsbHelper usbHelper;
    Activity activity;
    Context context;
    ArrayList<ArrayList<Integer>> dataList;

    private int reverse;

    private int startVoltage;
    private int endVoltage;

    private int gainResistor;

    private ArrayList<ArrayList<Pair<Float, Float>>> currentList;
    private ArrayList<ArrayList<Pair<Float, Float>>> smoothedCurrentList;

    private GraphView graph;

    public DisplayResultsTask(UsbHelper usbHelper, Activity activity,
                              Context context, ArrayList<ArrayList<Integer>> dataList) {
        this.usbHelper = usbHelper;
        this.activity = activity;
        this.context = context;
        this.dataList = dataList;

        //For testing purposes
        ArrayList<Integer> testDataList3 = new ArrayList<>(Arrays.asList
        ArrayList<Integer> testDataList2 = new ArrayList<>(Arrays.asList
        ArrayList<Integer> testDataList1 = new ArrayList<>(Arrays.asList(0x057A, 0x057B, 0x0584, 0x058E, 0x0598, 0x05A3, 0x05AD, 0x05B7, 0x05C1, 0x05CB, 0x05D6, 0x05E0, 0x05EA, 0x05F5, 0x05FE, 0x0608, 0x0613, 0x061D, 0x0628, 0x0632, 0x063C, 0x0646, 0x0650, 0x065A, 0x0665, 0x066F, 0x0679, 0x0684, 0x068E, 0x0698, 0x06A2, 0x06AC, 0x06B7, 0x06C1, 0x06CB, 0x06D5, 0x06DF, 0x06E9, 0x06F4, 0x06FE, 0x0709, 0x0713, 0x071E, 0x0727, 0x0732, 0x073C, 0x0746, 0x0751, 0x075B, 0x0765, 0x076F, 0x0779, 0x0784, 0x078F, 0x0799, 0x07A4, 0x07AE, 0x07B8, 0x07C2, 0x07CC, 0x07D7, 0x07E1, 0x07EB, 0x07F6, 0x0800, 0x080B, 0x0815, 0x0820, 0x082A, 0x0835, 0x083F, 0x0848, 0x0852, 0x085C, 0x0866, 0x0870, 0x087B, 0x0885, 0x0890, 0x089A, 0x08A5, 0x08AF, 0x08B9, 0x08C4, 0x08CE, 0x08D7, 0x08E1, 0x08EB, 0x08F5, 0x08FF, 0x090A, 0x0914, 0x091E, 0x0929, 0x0934, 0x093E, 0x0949, 0x0953, 0x095D, 0x0967, 0x0970, 0x097A, 0x0984, 0x098E, 0x0999, 0x09A4, 0x09AE, 0x09B9, 0x09C3, 0x09CD, 0x09D8, 0x09E2, 0x09EC, 0x09F6, 0x0A00, 0x0A0A, 0x0A14, 0x0A1E, 0x0A29, 0x0A33, 0x0A3E, 0x0A48, 0x0A53, 0x0A5D, 0x0A67));
        dataList.set(0, testDataList3);
    }

    @Override
    protected void onPreExecute() {
        startVoltage = usbHelper.getSweepStartVoltage();
        endVoltage = usbHelper.getSweepEndVoltage();

        gainResistor = usbHelper.getGainResistor();

        graph = (GraphView) activity.findViewById(R.id.graph);

        currentList = new ArrayList<>();
        smoothedCurrentList = new ArrayList<>();

        if (startVoltage > endVoltage) {
            reverse = 1;
        } else {
            reverse = 0;
        }
    }

    @Override
    protected Void doInBackground(Void... params) {
        float currentVoltage;
        int voltageDiff = abs(startVoltage-endVoltage);
        float voltageIncrement;


        for (int i=0; i < dataList.size(); i++) {
            ArrayList<Integer> activeDataList = dataList.get(i);
            ArrayList<Pair<Float,Float>> activeCurrentList = new ArrayList<>();
            ArrayList<Pair<Float, Float>> activeSmoothedCurrentList = new ArrayList<>();

            currentVoltage = startVoltage;

            voltageIncrement = (float)voltageDiff / activeDataList.size();
            //int numDataPoints = (int) (voltageDiff / voltageIncrement);
            //graph every nth point based on divisor = Total points to graph
            int criticalPoints = (int) Math.ceil((float)activeDataList.size()/1000);
            if (criticalPoints < 1) {
                criticalPoints = 1;
            }

            Log.d("DEBUGGING", "Critical: " + Integer.toString(criticalPoints));

            int start;
            int stop;
            int delta;
            if (i+reverse % 2 == 0) { //low to high
                start = 0;
                stop = activeDataList.size();
                delta = 1;
            } else {
                start = activeDataList.size() - 1;
                stop = -1;
                delta = -1;
            }

            ArrayList<DataPoint> dataPointsToGraph = new ArrayList<>();
            float movingAverage = 0;
            int numPointsInAverage = 0;
            int windowWidth = 3;

            for (int j = start ; j != stop; j += delta) {
                float current = (float)((activeDataList.get(j)) * (3.3/4096) / gainResistor * 1000000);
                activeCurrentList.add(new Pair<>(currentVoltage, current));

                if (numPointsInAverage < windowWidth) {
                    numPointsInAverage += 1;
                    movingAverage = (movingAverage*(((float)numPointsInAverage-1)/numPointsInAverage)) + ((1f / numPointsInAverage) * current);
                    activeSmoothedCurrentList.add(new Pair<Float, Float>(currentVoltage, movingAverage));
                } else {
                    if (start == 0) {
                        movingAverage = movingAverage + ((1f / windowWidth) * current) -
                                (activeCurrentList.get(j - windowWidth).second * ((1f / windowWidth)));
                    } else {
                        movingAverage = movingAverage + ((1f / windowWidth) * current) -
                                (activeCurrentList.get(start-j-windowWidth).second * ((1f / windowWidth)));
                    }
                    activeSmoothedCurrentList.add(new Pair<Float, Float>(currentVoltage, movingAverage));
                }



                if (j % criticalPoints == 0) {
                    dataPointsToGraph.add(new DataPoint(currentVoltage, current));
                }

                currentVoltage += voltageIncrement;
            }

            currentList.add(activeCurrentList);
            smoothedCurrentList.add(activeSmoothedCurrentList);


            DataPoint[] toPublish = dataPointsToGraph.toArray(new DataPoint[dataPointsToGraph.size()]);
            publishProgress(toPublish);
        }


        ArrayList<Float> smoothedCurrentToPrint = new ArrayList<>();
        for (int i=0; i<smoothedCurrentList.size(); i++) {
            ArrayList<Pair<Float, Float>> activeSmoothedCurrentList = smoothedCurrentList.get(i);
            //TODO make sure extrema aren't too close together
            int prevMax = 50, prevMin = 50;
            for (int j=1; j<activeSmoothedCurrentList.size()-1; j++) {
                float currentValue = activeSmoothedCurrentList.get(j).second;
                float prevValue = activeSmoothedCurrentList.get(j-1).second;
                float nextValue = activeSmoothedCurrentList.get(j+1).second;
                //check for max
                if (currentValue >= prevValue && currentValue >= nextValue && prevMax >= 50) {
                    Log.d("DEBUGGING", "MAX FOUND: " + Float.toString(currentValue));
                    Log.d("DEBUGGING", "VOLTAGE: " + Float.toString(activeSmoothedCurrentList.get(j).first));

                    prevMax += 1;
                }
                //check for min
                if (currentValue <= prevValue && currentValue <= nextValue && prevMin >= 50) {
                    Log.d("DEBUGGING", "MIN FOUND: " + Float.toString(currentValue));
                    Log.d("DEBUGGING", "VOLTAGE: " + Float.toString(activeSmoothedCurrentList.get(j).first));
                    prevMin = 0;
                }
                smoothedCurrentToPrint.add(currentValue);
                prevMax += 1;
                prevMin += 1;
            }
        }

        Log.d("DEBUGGING", smoothedCurrentToPrint.subList(0,400).toString());
        Log.d("DEBUGGING", smoothedCurrentToPrint.subList(400,800).toString());
        //Log.d("DEBUGGING", smoothedCurrentToPrint.subList(800,1200).toString());


        return null;
    }

    @Override
    protected void onProgressUpdate(DataPoint... dataPoints) {
        LineGraphSeries<DataPoint> lineGraphSeriesToGraph = new LineGraphSeries<>(dataPoints);
        Log.d("DEBUGGING", "Graphing Data!");
        graph.addSeries(lineGraphSeriesToGraph);
        graph.getViewport().setScalable(true);

    }
}
